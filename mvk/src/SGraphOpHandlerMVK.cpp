#include "SGraphOpHandlerMVK.h"

#include <cassert>

/*
 * DevNote: !!!ABOUT REVERTING OPERATION!!!
 * You only need to revert the operation on the graph
 * For instance: if add vertex failed, call _graph->removeVertex.
 * However, DON CALL the mapper remove function since a new operation is
 * generated by the 'removeVertex' and then, this operation is handled
 * here.
 * Note that, if the remove fails as well in MVK, this will call the addVertex
 * (Which already failed). This should not append except if the model is
 * NOT VALID at the very beginning. Here, we assume user work on model
 * that is valid at the beginning. (But we could improve this since it's
 * dangerous).
 */

typedef collab::SimpleGraph SGraph;


SGraphOpHandlerMVK::SGraphOpHandlerMVK(SGraphMVKMapper* mapper,
                                       collab::SimpleGraph* graph) {
    _mapperMVK  = mapper;
    _graph      = graph;
    assert(_mapperMVK != nullptr);
    assert(_graph != nullptr);
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::VertexAddOperation& op) {
    bool success = _mapperMVK->vertexAdd(op.vertexID());
    if(!success) {
        _graph->removeVertex(op.vertexID());
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::VertexRemoveOperation& op) {
    bool success = _mapperMVK->vertexRemove(op.vertexID());
    if(!success) {
        _graph->addVertex(op.vertexID());
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::EdgeAddOperation& op) {
    bool success = _mapperMVK->edgeAdd(op.fromID(), op.toID());
    if(!success) {
        _graph->removeEdge(op.fromID(), op.toID());
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::EdgeRemoveOperation& op) {
    bool success = _mapperMVK->edgeRemove(op.fromID(), op.toID());
    if(!success) {
        _graph->addEdge(op.fromID(), op.toID());
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::AttributeAddOperation& op) {
    // Just some aliases for me
    const std::string& vertexID = op.vertexID();
    const std::string& name = op.attributeName();
    const std::string& value = op.attributeValue();

    bool success = _mapperMVK->attributeAdd(vertexID, name, value);
    if(!success) {
        _graph->removeAttribute(vertexID, name);
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::AttributeRemoveOperation& op) {
    bool success = _mapperMVK->attributeRemove(op.vertexID(), op.attributeName());
    if(!success) {
        // TODO Get old value (Need to update this in AttributeRomveOperation)
        //_graph->setAttribute(op.vertexID(), op.attributeName, op.attributeOldValue());
    }
}

void SGraphOpHandlerMVK::handleOperation(const SGraph::AttributeSetOperation& op) {
    // Some aliases
    const std::string& vertexID = op.vertexID();
    const std::string& name = op.attributeName();
    const std::string& value = op.newValue();
    // const std::string& oldvalue = op.oldValue();

    bool success = _mapperMVK->attributeSet(vertexID, name, value);
    if(!success) {
        // TODO Update collab-common to have old value
        //_graph->setAttribute(vertexID, name, oldvalue);
    }
}
